# -*- coding: utf-8 -*-
"""lungs_canner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kd2hQfXOGnHrbQDDy4jzEIxAiyzwJ1JC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/survey lung cancer.csv')
df

df.shape

df.head()

df.duplicated()

df.duplicated().sum()

df=df.drop_duplicates()
df

df.isnull().sum()

df.info()

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
df['GENDER'] = le.fit_transform(df['GENDER'])
df['LUNG_CANCER'] = le.fit_transform(df['LUNG_CANCER'])
df['SMOKING'] = le.fit_transform(df['SMOKING'])
df['YELLOW_FINGERS'] = le.fit_transform(df['YELLOW_FINGERS'])
df['ANXIETY'] = le.fit_transform(df['ANXIETY'])
df['PEER_PRESSURE'] = le.fit_transform(df['PEER_PRESSURE'])
df['CHRONIC DISEASE'] = le.fit_transform(df['CHRONIC DISEASE'])
df['FATIGUE '] = le.fit_transform(df['FATIGUE '])
df['ALLERGY '] = le.fit_transform(df['ALLERGY '])
df['WHEEZING'] = le.fit_transform(df['WHEEZING'])
df['ALCOHOL CONSUMING'] = le.fit_transform(df['ALCOHOL CONSUMING'])
df['COUGHING'] = le.fit_transform(df['COUGHING'])
df['SHORTNESS OF BREATH'] = le.fit_transform(df['SHORTNESS OF BREATH'])
df['SWALLOWING DIFFICULTY'] = le.fit_transform(df['SWALLOWING DIFFICULTY'])
df['CHEST PAIN'] = le.fit_transform(df['CHEST PAIN'])
df

#M,F and 1 and 2 yes or no change into 1 and 0.

sns.countplot(x="LUNG_CANCER",data=df)
plt.title("Target distribution")

df['LUNG_CANCER'].value_counts()

def plot(col,df=df):
  return df.groupby(col)['LUNG_CANCER'].value_counts(normalize = True).unstack().plot(kind='bar',figsize=(8,5))

plot('GENDER')

plot("AGE")

X=df.drop('LUNG_CANCER', axis = 1)
y = df['LUNG_CANCER']

#Splitting data for training and testing
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= 0.25, random_state=0)
#Fitting training data to the model
from sklearn.linear_model import LogisticRegression
lr_model=LogisticRegression(random_state=0)
lr_model.fit(X_train, y_train)
#Predicting result using testing data
y_lr_pred= lr_model.predict(X_test)
#Model accuracy
from sklearn.metrics import classification_report, accuracy_score, f1_score
lr_cr=classification_report(y_test, y_lr_pred)
print(lr_cr)

# prompt: give code for decision tree

from sklearn.tree import DecisionTreeClassifier

# Initialize and train the decision tree classifier
dt_model = DecisionTreeClassifier(random_state=0)
dt_model.fit(X_train, y_train)

# Make predictions on the test set
y_dt_pred = dt_model.predict(X_test)

# Evaluate the model
dt_cr = classification_report(y_test, y_dt_pred)
print(dt_cr)

# You can further evaluate using other metrics like accuracy_score and f1_score
dt_accuracy = accuracy_score(y_test, y_dt_pred)
print(f"Accuracy: {dt_accuracy}")

dt_f1 = f1_score(y_test, y_dt_pred)
print(f"F1-Score: {dt_f1}")

# prompt: generate the code to train a model

# This code trains a Logistic Regression and a Decision Tree Classifier
# on the provided dataset and evaluates their performance.  No changes are
# needed to execute the model training as provided in the prompt.


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, f1_score
from sklearn.tree import DecisionTreeClassifier

warnings.filterwarnings('ignore')

# Load the dataset (assuming the file path is correct)
df=pd.read_csv('/survey lung cancer.csv')

# Data Cleaning and Preprocessing (from the provided code)
df=df.drop_duplicates()
le = preprocessing.LabelEncoder()
for col in ['GENDER', 'LUNG_CANCER', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY',
            'PEER_PRESSURE', 'CHRONIC DISEASE', 'FATIGUE ', 'ALLERGY ',
            'WHEEZING', 'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH',
            'SWALLOWING DIFFICULTY', 'CHEST PAIN']:
    df[col] = le.fit_transform(df[col])

# Feature and Target Variable
X=df.drop('LUNG_CANCER', axis = 1)
y = df['LUNG_CANCER']

# Splitting data for training and testing
X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= 0.25, random_state=0)

# Logistic Regression Model Training and Evaluation
lr_model=LogisticRegression(random_state=0)
lr_model.fit(X_train, y_train)
y_lr_pred= lr_model.predict(X_test)
print("Logistic Regression Classification Report:")
print(classification_report(y_test, y_lr_pred))


# Decision Tree Model Training and Evaluation
dt_model = DecisionTreeClassifier(random_state=0)
dt_model.fit(X_train, y_train)
y_dt_pred = dt_model.predict(X_test)
print("\nDecision Tree Classification Report:")
print(classification_report(y_test, y_dt_pred))
print(f"Decision Tree Accuracy: {accuracy_score(y_test, y_dt_pred)}")
print(f"Decision Tree F1-Score: {f1_score(y_test, y_dt_pred)}")

# prompt: code to test the model that already build

import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, f1_score
from sklearn.tree import DecisionTreeClassifier
import warnings

warnings.filterwarnings('ignore')

# Load the dataset
df = pd.read_csv('/survey lung cancer.csv')

# Preprocessing (same as in your original code)
df = df.drop_duplicates()
le = preprocessing.LabelEncoder()
for col in ['GENDER', 'LUNG_CANCER', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY',
            'PEER_PRESSURE', 'CHRONIC DISEASE', 'FATIGUE ', 'ALLERGY ',
            'WHEEZING', 'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH',
            'SWALLOWING DIFFICULTY', 'CHEST PAIN']:
    df[col] = le.fit_transform(df[col])

# Features and target variable
X = df.drop('LUNG_CANCER', axis=1)
y = df['LUNG_CANCER']

# Split data (using the same random_state for consistency)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Function to test a model
def test_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    print(classification_report(y_test, y_pred))
    print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
    print(f"F1-Score: {f1_score(y_test, y_pred)}")


# Test the Logistic Regression model
lr_model = LogisticRegression(random_state=0) # You need to train the model first
lr_model.fit(X_train, y_train) #<--- this was the missing piece!
print("Logistic Regression:")
test_model(lr_model, X_test, y_test)

# Test the Decision Tree model
dt_model = DecisionTreeClassifier(random_state=0) #You need to train the model first
dt_model.fit(X_train,y_train) #<--- this was the missing piece!
print("\nDecision Tree:")
test_model(dt_model, X_test, y_test)

dt_model.predict([[1,68,0,1,1,0,0,1,0,1,1,1,1,1,1]])

